#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <math.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// === Voltmeter / Ohmmeter Variables ===
int analogInput = A0;
float vout = 0.0;
float vin = 0.0;
float R1 = 10000.0;
float R2 = 3100.0;
int value = 0;
int mode = 0;
int raw = 0;
float buffer = 0;
float Vout = 0;
int Vin = 5;
float R11 = 1000.0;
float R22 = 0;

// === ACS712 Precise Configuration ===
const float SENSITIVITY = 0.100; // For ACS712-20A module (100mV/A)
const float NANO_ADC_REF = 5.0;
const int ADC_MAX = 1023;
const int ACS_PIN = A3;
float ACS_PINOffsetV = 0;

const int SAMPLES = 100;
const float NOISE_FLOOR = 0.020;
const float CORRECTION_FACTOR = 1.0;

void setup() {
  Serial.begin(9600);
  pinMode(analogInput, INPUT);
  pinMode(9, OUTPUT);        // Buzzer
  pinMode(7, INPUT_PULLUP);  // Mode switch
  digitalWrite(9, HIGH);
  delay(40);
  digitalWrite(9, LOW);
  pinMode(13, OUTPUT);

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    while (true);
  }

  display.display();
  delay(1000);
  display.clearDisplay();

  calibrateSensor(); // ðŸ“Œ Use your precise calibration
}

void loop() {
  if (digitalRead(7) == LOW) {
    delay(200);
    mode++;
    if (mode > 4) mode = 0;
  }

  switch (mode) {
    case 0: // Voltmeter
      value = analogRead(A0);
      vout = (value * 5.0) / 1023.0;
      vin = vout / (R2 / (R1 + R2));
      if (vin < 0.09) vin = 0.0;

      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println("Voltmeter Mode");
      display.setTextSize(2);
      display.setCursor(10, 30);
      display.print(vin, 2);
      display.print(" V");
      display.display();
      break;

    case 1: // Diode / LED Test
      value = analogRead(A2);
      vout = (value * 5.0) / 1023.0;
      vout = 5 - vout;

      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println("Diode/LED Test");
      display.setTextSize(2);
      display.setCursor(10, 30);
      display.print(vout, 2);
      display.print(" V");
      display.display();
      break;

    case 2: // Ohmmeter
      raw = analogRead(A2);
      buffer = raw * Vin;
      Vout = buffer / 1023.0;
      buffer = (Vin / Vout) - 1;
      R22 = R11 * buffer;

      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println("OHM Meter Mode");
      display.setTextSize(2);
      if (R22 < 1000) {
        display.setCursor(10, 30);
        display.print(R22, 0);
        display.print(" OHM");
      } else {
        display.setCursor(10, 30);
        display.print(R22 / 1000, 2);
        display.print(" K");
      }
      display.display();
      break;

    case 3: // Continuity
      raw = analogRead(A2);
      buffer = raw * Vin;
      Vout = buffer / 1023.0;
      buffer = (Vin / Vout) - 1;
      R22 = R11 * buffer;

      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println("Continuity Mode");
      display.setTextSize(2);
      display.setCursor(10, 30);
      display.print(R22, 0);
      display.print(" OHM");
      display.display();

      if (R22 < 100) {
        digitalWrite(9, HIGH);
        delay(100);
        digitalWrite(9, LOW);
      }
      break;

    case 4: // Current Meter using ACS712
      float current = getRMSCurrent();

      // Threshold condition: show 0.00 A if below 0.1 A
      if (current < 0.1) {
        current = 0.0;
      }

      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(SSD1306_WHITE);
      display.setCursor(0, 0);
      display.println("Current Meter Mode");
      display.setTextSize(2);
      display.setCursor(10, 30);
      display.print(current, 2);
      display.print(" A");
      display.display();

      // If you want serial print too, uncomment:
      // Serial.print("Current: ");
      // Serial.println(current, 2);
      break;
  }

  delay(300);
}

// === New Accurate Calibration ===
void calibrateSensor() {
  long sum = 0;
  const int CAL_SAMPLES = 300;
  for (int i = 0; i < CAL_SAMPLES; i++) {
    sum += analogRead(ACS_PIN);
    delay(1);
  }
  ACS_PINOffsetV = (sum / (float)CAL_SAMPLES) * (NANO_ADC_REF / ADC_MAX);
}

// === RMS Current Reading ===
float getRMSCurrent() {
  float sumSq = 0;
  for (int i = 0; i < SAMPLES; i++) {
    float voltage = analogRead(ACS_PIN) * (NANO_ADC_REF / ADC_MAX);
    float current = (voltage - ACS_PINOffsetV) / SENSITIVITY;
    sumSq += current * current;
    delayMicroseconds(100);
  }
  float rms = sqrt(sumSq / SAMPLES);
  return (rms > NOISE_FLOOR) ? rms * CORRECTION_FACTOR : 0.0;
}
